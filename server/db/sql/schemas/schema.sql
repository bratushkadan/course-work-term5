CREATE SCHEMA "floral";

-- DROP TYPE IF EXISTS "floral"."order_status";
CREATE TYPE "floral"."order_status" AS ENUM (
  'created',
  'in_progress',
  'processed',
  'delivery',
  'canceled',
  'completed'
);

CREATE TABLE "floral"."store" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(100) UNIQUE NOT NULL,
  "password" varchar(500) NOT NULL,
  "email" varchar(50) UNIQUE NOT NULL,
  "phone_number" varchar(16) NOT NULL,
  "created" timestamp NOT NULL DEFAULT NOW()
);

CREATE TABLE "floral"."user" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "first_name" varchar(100) NOT NULL,
  "last_name" varchar(100) NOT NULL,
  "email" varchar(50) UNIQUE NOT NULL,
  "password" varchar(500) NOT NULL,
  "phone_number" varchar(16) UNIQUE NOT NULL,
  "created" timestamp NOT NULL DEFAULT NOW()
);

CREATE TABLE "floral"."product_category" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(60) NOT NULL,
  "description" varchar(150) DEFAULT '',
  "created" timestamp NOT NULL DEFAULT NOW(),
  "modified" timestamp NOT NULL DEFAULT NOW()
);

CREATE TABLE "floral"."product" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "store_id" integer NOT NULL,
  "name" varchar(100) NOT NULL,
  "description" varchar(1000) DEFAULT '',
  "image_url" varchar(300) NOT NULL,
  "price" integer NOT NULL,
  "min_height" smallint,
  "max_height" smallint,
  "category_id" integer,
  "created" timestamp NOT NULL DEFAULT NOW(),
  "modified" timestamp NOT NULL DEFAULT NOW()
);

COMMENT ON COLUMN "floral"."product"."min_height" IS 'in cm';

COMMENT ON COLUMN "floral"."product"."max_height" IS 'in cm';

CREATE TABLE "floral"."user_favorite" (
  "user_id" integer NOT NULL,
  "product_id" integer NOT NULL,
  "created" timestamp NOT NULL DEFAULT NOW(),
  PRIMARY KEY ("user_id", "product_id")
);

CREATE TABLE "floral"."cart_position" (
  "user_id" integer NOT NULL,
  "product_id" integer NOT NULL,
  "quantity" integer NOT NULL
);

CREATE TABLE "floral"."order" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" integer NOT NULL,
  "status" floral.order_status,
  "created" timestamp NOT NULL DEFAULT NOW(),
  "status_modified" timestamp NOT NULL DEFAULT NOW()
);

CREATE TABLE "floral"."order_position" (
  "order_id" integer NOT NULL,
  "product_id" integer NOT NULL,
  "quantity" integer NOT NULL
);

CREATE TABLE "floral"."review" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" integer,
  "product_id" integer NOT NULL,
  "rating" float NOT NULL,
  "review_text" varchar(2500),
  "created" timestamp NOT NULL DEFAULT NOW(),
  "modified" timestamp NOT NULL DEFAULT NOW()
);

CREATE INDEX "product_store_id_idx" ON "floral"."product" ("store_id");

CREATE INDEX "user_favorite_user_id_idx" ON "floral"."user_favorite" ("user_id");

CREATE INDEX "user_favorite_product_id_idx" ON "floral"."user_favorite" ("product_id");

CREATE INDEX "cart_position_user_id_idx" ON "floral"."cart_position" ("user_id");

CREATE INDEX "cart_position_product_id_idx" ON "floral"."cart_position" ("product_id");

CREATE UNIQUE INDEX "cart_position_user_id_product_id_key" ON "floral"."cart_position" ("user_id", "product_id");

CREATE INDEX "order_user_id" ON "floral"."order" ("user_id");

CREATE INDEX "order_position_order_id_idx" ON "floral"."order_position" ("order_id");

CREATE INDEX "order_position_product_id_idx" ON "floral"."order_position" ("product_id");

CREATE UNIQUE INDEX "order_position_product_id_order_id_key" ON "floral"."order_position" ("product_id", "order_id");

CREATE INDEX "review_user_id_idx" ON "floral"."review" ("user_id");

CREATE INDEX "review_product_id_idx" ON "floral"."review" ("product_id");

CREATE UNIQUE INDEX "review_user_id_product_id_key" ON "floral"."review" ("user_id", "product_id");

-- TODO: make foreign key expessions idempotent
ALTER TABLE
  "floral"."product"
ADD
  FOREIGN KEY ("store_id") REFERENCES "floral"."store" ("id") ON DELETE NO ACTION ON UPDATE CASCADE;

ALTER TABLE
  "floral"."product"
ADD
  FOREIGN KEY ("category_id") REFERENCES "floral"."product_category" ("id") ON DELETE
SET
  NULL ON UPDATE CASCADE;

ALTER TABLE
  "floral"."user_favorite"
ADD
  FOREIGN KEY ("user_id") REFERENCES "floral"."user" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE
  "floral"."user_favorite"
ADD
  FOREIGN KEY ("product_id") REFERENCES "floral"."product" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE
  "floral"."cart_position"
ADD
  FOREIGN KEY ("user_id") REFERENCES "floral"."user" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE
  "floral"."cart_position"
ADD
  FOREIGN KEY ("product_id") REFERENCES "floral"."product" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE
  "floral"."order"
ADD
  FOREIGN KEY ("user_id") REFERENCES "floral"."user" ("id") ON DELETE NO ACTION;

ALTER TABLE
  "floral"."order_position"
ADD
  FOREIGN KEY ("order_id") REFERENCES "floral"."order" ("id") ON DELETE NO ACTION ON UPDATE CASCADE;

ALTER TABLE
  "floral"."order_position"
ADD
  FOREIGN KEY ("product_id") REFERENCES "floral"."product" ("id") ON DELETE NO ACTION ON UPDATE CASCADE;

ALTER TABLE
  "floral"."review"
ADD
  FOREIGN KEY ("user_id") REFERENCES "floral"."user" ("id") ON DELETE
SET
  NULL ON UPDATE CASCADE;

ALTER TABLE
  "floral"."review"
ADD
  FOREIGN KEY ("product_id") REFERENCES "floral"."product" ("id") ON DELETE CASCADE ON UPDATE CASCADE;